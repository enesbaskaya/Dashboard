// <auto-generated />
using System;
using Dashboard.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Dashboard.Migrations
{
    [DbContext(typeof(Context))]
    [Migration("20201212191150_m_2")]
    partial class m_2
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Dashboard.Models.Admin", b =>
                {
                    b.Property<long>("adminId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("mail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("adminId");

                    b.ToTable("admin");
                });

            modelBuilder.Entity("Dashboard.Models.AreaInfo", b =>
                {
                    b.Property<long>("areaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("areaName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<string>("ground")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("heightWidth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("maxPlayer")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("openCloseTime")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<double>("price")
                        .HasColumnType("double");

                    b.Property<bool>("recordingMatch")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("registerDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("roof")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("time")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("areaId");

                    b.HasIndex("branchId");

                    b.ToTable("areaInfo");
                });

            modelBuilder.Entity("Dashboard.Models.Branch", b =>
                {
                    b.Property<long>("branchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("admin")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("branchType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("catering")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("contactId")
                        .HasColumnType("bigint");

                    b.Property<string>("identityNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("market")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("openDays")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("paymentMethods")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("registerDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("shoesRent")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("shower")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("taxNumber")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("branchId");

                    b.HasIndex("contactId");

                    b.ToTable("branch");
                });

            modelBuilder.Entity("Dashboard.Models.BranchCards", b =>
                {
                    b.Property<long>("cardId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("bankName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<string>("cardOwner")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("iban")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("cardId");

                    b.HasIndex("branchId");

                    b.ToTable("branchCards");
                });

            modelBuilder.Entity("Dashboard.Models.BranchEconomy", b =>
                {
                    b.Property<long>("branchEconomyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<double>("giro")
                        .HasColumnType("double");

                    b.Property<string>("month")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("branchEconomyId");

                    b.HasIndex("branchId");

                    b.ToTable("branchEconomy");
                });

            modelBuilder.Entity("Dashboard.Models.BranchMatchWorth", b =>
                {
                    b.Property<long>("worthId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("amount")
                        .HasColumnType("double");

                    b.Property<long>("matchId")
                        .HasColumnType("bigint");

                    b.Property<string>("paymentType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("worthId");

                    b.HasIndex("matchId");

                    b.ToTable("branchMatchWorth");
                });

            modelBuilder.Entity("Dashboard.Models.BranchNotifications", b =>
                {
                    b.Property<long>("notificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("header")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("sender")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("notificationId");

                    b.HasIndex("branchId");

                    b.ToTable("branchNotifications");
                });

            modelBuilder.Entity("Dashboard.Models.BranchStars", b =>
                {
                    b.Property<long>("starId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<int>("count")
                        .HasColumnType("int");

                    b.Property<int>("point")
                        .HasColumnType("int");

                    b.Property<string>("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("starId");

                    b.HasIndex("branchId");

                    b.ToTable("branchStars");
                });

            modelBuilder.Entity("Dashboard.Models.BranchTransActions", b =>
                {
                    b.Property<long>("transId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("amount")
                        .HasColumnType("double");

                    b.Property<long>("cardId")
                        .HasColumnType("bigint");

                    b.Property<bool>("checkActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("transId");

                    b.HasIndex("cardId");

                    b.ToTable("branchTransActions");
                });

            modelBuilder.Entity("Dashboard.Models.BranchWallet", b =>
                {
                    b.Property<long>("walletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("balance")
                        .HasColumnType("double");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<double>("debt")
                        .HasColumnType("double");

                    b.HasKey("walletId");

                    b.HasIndex("branchId");

                    b.ToTable("branchWallet");
                });

            modelBuilder.Entity("Dashboard.Models.City", b =>
                {
                    b.Property<long>("cityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("cityName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("regionId")
                        .HasColumnType("bigint");

                    b.HasKey("cityId");

                    b.HasIndex("regionId");

                    b.ToTable("city");
                });

            modelBuilder.Entity("Dashboard.Models.CompanySupportRequests", b =>
                {
                    b.Property<long>("requestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("header")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<bool>("isActive")
                        .HasColumnType("tinyint(1)");

                    b.HasKey("requestId");

                    b.HasIndex("branchId");

                    b.ToTable("companySupportRequests");
                });

            modelBuilder.Entity("Dashboard.Models.ContactInfo", b =>
                {
                    b.Property<long>("contactId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("address")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("districtId")
                        .HasColumnType("bigint");

                    b.Property<string>("mail")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("telephone")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("contactId");

                    b.HasIndex("districtId");

                    b.ToTable("contactInfo");
                });

            modelBuilder.Entity("Dashboard.Models.DeleteAreaRequests", b =>
                {
                    b.Property<long>("deleteRequestId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("areaId")
                        .HasColumnType("bigint");

                    b.Property<string>("content")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("title")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("deleteRequestId");

                    b.HasIndex("areaId");

                    b.ToTable("deleteAreaRequests");
                });

            modelBuilder.Entity("Dashboard.Models.DepositTransActions", b =>
                {
                    b.Property<long>("transId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<double>("amount")
                        .HasColumnType("double");

                    b.Property<long>("branchId")
                        .HasColumnType("bigint");

                    b.Property<bool>("checkActive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("transId");

                    b.HasIndex("branchId");

                    b.ToTable("depositTransActions");
                });

            modelBuilder.Entity("Dashboard.Models.Districts", b =>
                {
                    b.Property<long>("districtId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("cityId")
                        .HasColumnType("bigint");

                    b.Property<string>("districtName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("districtId");

                    b.HasIndex("cityId");

                    b.ToTable("districts");
                });

            modelBuilder.Entity("Dashboard.Models.MatchHistory", b =>
                {
                    b.Property<long>("matchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("appointmentType")
                        .HasColumnType("int");

                    b.Property<long>("areaId")
                        .HasColumnType("bigint");

                    b.Property<double>("clock")
                        .HasColumnType("double");

                    b.Property<string>("date")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("loserTeam")
                        .HasColumnType("bigint");

                    b.Property<long?>("loserteamId")
                        .HasColumnType("bigint");

                    b.Property<string>("score")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("winnerTeam")
                        .HasColumnType("bigint");

                    b.Property<long?>("winnerteamId")
                        .HasColumnType("bigint");

                    b.HasKey("matchId");

                    b.HasIndex("areaId");

                    b.HasIndex("loserteamId");

                    b.HasIndex("winnerteamId");

                    b.ToTable("matchHistory");
                });

            modelBuilder.Entity("Dashboard.Models.Regions", b =>
                {
                    b.Property<long>("regionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("regionName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("regionId");

                    b.ToTable("regions");
                });

            modelBuilder.Entity("Dashboard.Models.Team", b =>
                {
                    b.Property<long>("teamId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<string>("avatarPath")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("name")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("players")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("shortName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("teamId");

                    b.HasIndex("userId");

                    b.ToTable("team");
                });

            modelBuilder.Entity("Dashboard.Models.TeamData", b =>
                {
                    b.Property<long>("dataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("draws")
                        .HasColumnType("int");

                    b.Property<int>("loses")
                        .HasColumnType("int");

                    b.Property<long>("teamId")
                        .HasColumnType("bigint");

                    b.Property<int>("wins")
                        .HasColumnType("int");

                    b.Property<string>("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("dataId");

                    b.HasIndex("teamId");

                    b.ToTable("teamData");
                });

            modelBuilder.Entity("Dashboard.Models.User", b =>
                {
                    b.Property<long>("userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("contactId")
                        .HasColumnType("bigint");

                    b.Property<string>("dateOfBirth")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("firstName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("footType")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("height")
                        .HasColumnType("int");

                    b.Property<string>("lastName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("password")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("position")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("registerDate")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<string>("username")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<int>("weight")
                        .HasColumnType("int");

                    b.HasKey("userId");

                    b.HasIndex("contactId");

                    b.ToTable("user");
                });

            modelBuilder.Entity("Dashboard.Models.UserData", b =>
                {
                    b.Property<long>("dataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<int>("draws")
                        .HasColumnType("int");

                    b.Property<int>("loses")
                        .HasColumnType("int");

                    b.Property<int>("ratePoints")
                        .HasColumnType("int");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.Property<int>("userRateCounter")
                        .HasColumnType("int");

                    b.Property<int>("wins")
                        .HasColumnType("int");

                    b.Property<string>("year")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.HasKey("dataId");

                    b.HasIndex("userId");

                    b.ToTable("userData");
                });

            modelBuilder.Entity("Dashboard.Models.UserFriends", b =>
                {
                    b.Property<long>("userFriendId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<long>("friendId")
                        .HasColumnType("bigint");

                    b.Property<long>("userId")
                        .HasColumnType("bigint");

                    b.HasKey("userFriendId");

                    b.HasIndex("friendId");

                    b.HasIndex("userId");

                    b.ToTable("userFriends");
                });

            modelBuilder.Entity("Dashboard.Models.AreaInfo", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.Branch", b =>
                {
                    b.HasOne("Dashboard.Models.ContactInfo", "contact")
                        .WithMany()
                        .HasForeignKey("contactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchCards", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchEconomy", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchMatchWorth", b =>
                {
                    b.HasOne("Dashboard.Models.MatchHistory", "match")
                        .WithMany()
                        .HasForeignKey("matchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchNotifications", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchStars", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchTransActions", b =>
                {
                    b.HasOne("Dashboard.Models.BranchCards", "card")
                        .WithMany()
                        .HasForeignKey("cardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.BranchWallet", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.City", b =>
                {
                    b.HasOne("Dashboard.Models.Regions", "region")
                        .WithMany()
                        .HasForeignKey("regionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.CompanySupportRequests", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.ContactInfo", b =>
                {
                    b.HasOne("Dashboard.Models.Districts", "district")
                        .WithMany()
                        .HasForeignKey("districtId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.DeleteAreaRequests", b =>
                {
                    b.HasOne("Dashboard.Models.AreaInfo", "area")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.DepositTransActions", b =>
                {
                    b.HasOne("Dashboard.Models.Branch", "branch")
                        .WithMany()
                        .HasForeignKey("branchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.Districts", b =>
                {
                    b.HasOne("Dashboard.Models.City", "city")
                        .WithMany()
                        .HasForeignKey("cityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.MatchHistory", b =>
                {
                    b.HasOne("Dashboard.Models.AreaInfo", "area")
                        .WithMany()
                        .HasForeignKey("areaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.Models.Team", "loser")
                        .WithMany()
                        .HasForeignKey("loserteamId");

                    b.HasOne("Dashboard.Models.Team", "winner")
                        .WithMany()
                        .HasForeignKey("winnerteamId");
                });

            modelBuilder.Entity("Dashboard.Models.Team", b =>
                {
                    b.HasOne("Dashboard.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.TeamData", b =>
                {
                    b.HasOne("Dashboard.Models.Team", "team")
                        .WithMany()
                        .HasForeignKey("teamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.User", b =>
                {
                    b.HasOne("Dashboard.Models.ContactInfo", "contact")
                        .WithMany()
                        .HasForeignKey("contactId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.UserData", b =>
                {
                    b.HasOne("Dashboard.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Dashboard.Models.UserFriends", b =>
                {
                    b.HasOne("Dashboard.Models.User", "friend")
                        .WithMany()
                        .HasForeignKey("friendId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Dashboard.Models.User", "user")
                        .WithMany()
                        .HasForeignKey("userId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
